@page "/login"

@inject ILoginService loginService
@inject IMostrarMensajes mostrarMensajes
@inject IManager manager
@inject AuthenticationStateProvider auth
@inject NavigationManager navigate

@using PuntoVentaBin.Client.Seguridad
<style>
    html,
    body {
        height: 100%;
        margin: 0;
        padding: 0;
        background: linear-gradient(135deg, #f8f9fa, #e9ecef);
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .back-button {
        position: fixed;
        top: 20px;
        left: 20px;
        z-index: 1000;
        color: #007bff;
        background: transparent;
        border: none;
    }

        .back-button:hover {
            color: #0056b3;
            text-decoration: none;
        }

    .form-signin {
        width: 100%;
        max-width: 400px;
        padding: 2rem;
        margin: auto;
        background-color: #ffffff;
        border-radius: 0.5rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

        .form-signin img {
            width: 120px;
        }

        .form-signin h1 {
            font-size: 1.5rem;
            margin-bottom: 1.5rem;
            color: #333333;
        }

    .input-group-text {
        background-color: #f8f9fa;
        border: none;
    }

    .form-control {
        border-radius: 0.25rem;
        border: 1px solid #ced4da;
    }

        .form-control:focus {
            border-color: #80bdff;
            box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);
        }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
        transition: background-color 0.3s, border-color 0.3s;
    }

        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #004085;
        }

    .spinner-border {
        width: 3rem;
        height: 3rem;
    }

    .alert {
        font-size: 0.9rem;
    }

    .login-links {
        margin-top: 1rem;
    }

        .login-links a {
            display: block;
            color: #007bff;
            text-decoration: none;
            margin-bottom: 0.5rem;
            transition: color 0.3s;
        }

            .login-links a:hover {
                color: #0056b3;
                text-decoration: underline;
            }
</style>

<!-- Botón de regreso -->
<button class="back-button" @onclick="Regresar" aria-label="Regresar">
    <i class="bi bi-arrow-left" style="font-size: 1.5rem;"></i>
</button>


<div class="d-flex align-items-center justify-content-center vh-100">
    <main class="form-signin">
        <EditForm OnValidSubmit="Ingresar" Model="usuario">
            <DataAnnotationsValidator />
            <h4 class="h3 fw-normal text-center">Bienvenido</h4>

            <img src="/ImagenesIndex/store.png" class="mb-4 rounded mx-auto d-block img-fluid" alt="Logo de la Aplicación" />

            <div class="input-group input-group-lg mb-3">
                <span class="input-group-text">
                    <i class="bi bi-envelope" style="font-size: 1.2rem;"></i>
                </span>
                <input type="email" class="form-control" placeholder="Email" @bind-value="@usuario.Email">
            </div>
            <ValidationMessage For="(() => usuario.Email)" />

            <div class="input-group input-group-lg mb-3">
                <span class="input-group-text">
                    <i class="bi bi-lock" style="font-size: 1.2rem;"></i>
                </span>
                <input type="password" class="form-control" placeholder="Contraseña" @bind-value="@usuario.Password">
            </div>
            <ValidationMessage For="(() => usuario.Password)" />

            <!-- Botón de Iniciar Sesión -->
            <button type="submit" class="w-100 btn btn-primary btn-lg mt-3" disabled="@(procesando == true)">
                <i class="bi bi-box-arrow-in-right me-2"></i> Iniciar sesión
            </button>

            <!-- Enlaces adicionales estilizados -->
            <div class="login-links text-center mt-3">
                <NavLink class="text-decoration-none text-muted d-block mb-2" href="/recuperar-contraseña">
                    <i class="bi bi-lock-fill me-2"></i> ¿Olvidaste tu contraseña? Restablécela aquí.
                </NavLink>
                <NavLink class="text-decoration-none text-muted d-block" href="/registro">
                    <i class="bi bi-person-plus-fill me-2"></i> ¿No tienes una cuenta? <strong>Crear Cuenta</strong>
                </NavLink>
            </div>


            @if (procesando)
            {
                <div class="text-center mt-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Cargando...</span>
                    </div>
                    <p class="mt-2">@cargando</p>
                </div>
            }
        </EditForm>

        @if (!string.IsNullOrEmpty(mensajeLogin))
        {
            <div class="alert alert-info mt-4 text-center" role="alert">
                @mensajeLogin
            </div>
        }

    </main>
</div>


@code {
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }

    private string mensajeLogin;
    private string cargando = "Cargando...";

    private bool procesando = false;

    protected UserInfo usuario { get; set; } = new UserInfo();
    protected string mensaje { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await auth.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            navigate.NavigateTo("/mis-negocios");
        }
    }

    private async Task Ingresar()
    {
        procesando = true;
        mensaje = "Cargando...";

        var respuesta = await manager.Post<UserInfo, UserToken>("api/Autorizacion", usuario);

        if (respuesta.Estado == EstadosDeRespuesta.Correcto)
        {
            usuario = new UserInfo();
            await loginService.Login(respuesta.Datos.Token);
            navigate.NavigateTo("/mis-negocios");
        }
        else if (respuesta.Estado == EstadosDeRespuesta.NoProceso)
        {
            mensajeLogin = respuesta.Mensaje;
            await mostrarMensajes.MostrarMensajeInformacion(mensajeLogin);
        }
        else if (respuesta.Estado == EstadosDeRespuesta.Error)
        {
            await mostrarMensajes.MostrarMensajeError(respuesta.Mensaje);
        }

        procesando = false;
    }

    private void Regresar()
    {
        navigate.NavigateTo("/");
    }
}
