@page "/recuperar-contraseña"
@inject IManager manager
@inject IMostrarMensajes mostrarMensajes
@inject NavigationManager navigationManager

<h3>Recuperar Contraseña</h3>

<EditForm Model="emailModel" OnValidSubmit="EnviarSolicitudRecuperacion">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Email:</label>
        <InputText type="email" class="form-control" @bind-Value="emailModel.Email" />
        <ValidationMessage For="() => emailModel.Email" />
    </div>

    <button type="submit" class="btn btn-primary">Enviar</button>
</EditForm>

@if (procesando)

{
    <div class="text-center mt-4">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Cargando...</span>
        </div>
        <p class="mt-2">@cargando</p>
    </div>
}

@if (!string.IsNullOrEmpty(mensaje))

{
    <div class="alert alert-info mt-3">
        @mensaje
    </div>
}

@code {

    private EmailModel emailModel = new EmailModel();

    private string mensaje;

    private bool procesando = false;

    private string cargando = "Cargando...";



    private async Task EnviarSolicitudRecuperacion()

    {

        procesando = true;



        var respuesta = await manager.Post<EmailModel, bool>("api/Recuperacion/EnviarTokenRecuperacion", emailModel);



        if (respuesta.Estado == EstadosDeRespuesta.Correcto)

        {

            mensaje = "Si el correo electrónico existe, se ha enviado un enlace para restablecer la contraseña.";

            await mostrarMensajes.MostrarMensajeInformacion(mensaje);



            emailModel = new EmailModel();

            navigationManager.NavigateTo("/login");

        }

        else

        {

            mensaje = "Ocurrió un error al procesar la solicitud.";

            await mostrarMensajes.MostrarMensajeError(mensaje);

        }



        procesando = false;

    }

}